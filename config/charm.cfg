# Configuration file

_meson {
    # Allows extra debug output in the console.
    B:"Debug mode"=false
}


_modules {
    B:CharmBrewing=true
    B:CharmCrafting=true
    B:CharmEnchanting=true
    B:CharmLoot=true
    B:CharmMisc=true
    B:CharmSmithing=true
    B:CharmWorld=true
}


charmbrewing {
    # Brew cocoa beans in water to make Coffee which gives you a helpful boost.
    B:Coffee=true

    # A nasty potion that curses player items, decays the environment, withers creatures, and turns villagers and horses bad.
    B:Corruption=true

    # Brew an Eye of Ender with a Night Vision potion to make a Potion of Ender Sight.
    # Enderman are attracted to your location and you might hear a ringing sound coming from the direction of a stronghold.
    # In the End, the Potion of Ender Sight helps you find an End City.
    B:EnderSight=true

    # Craft a Long Potion with a Cake to make a Flavored Cake that gives a potion effect after eating each slice.
    B:FlavoredCake=true

    # Allows Potion of Poison to be created from Mundane Potions and Poisonous Potatoes.
    B:PoisonousPotatoBrew=true

    coffee {
        # Duration (in seconds) of Coffee effects.
        I:"Coffee effect duration"=10
    }

    corruption {
        # Duration (in seconds) of corruption effect when consumed.
        I:"Corruption duration"=5

        # Chance (out of 1.0) of an item becoming cursed every second when experiencing corruption.
        D:"Curse chance"=0.25

        # Distance (in blocks) around the area of splash corruption are at risk of decay.
        # Set to 0 to disable this effect.
        I:"Decay distance"=2

        # List of blocks that cannot decay due to splash corruption effect.
        S:"Undecayable blocks" <
            air
            bedrock
            obsidian
            end_portal_frame
            end_portal
         >

        # Strength of the Wither effect that accompanies the corruption effect.
        I:"Wither strength"=3
    }

    endersight {
        # Invert the colours when under the effect of Ender Sight.
        B:"Client shader effect"=true

        # Duration (in seconds) of Ender Sight effect when consumed.
        I:"Ender Sight duration"=10

        # Chance (out of 1.0) of an Enderman spawning close by when experiencing the Ender Sight effect.
        D:"Enderman spawn chance"=0.05
    }

    flavoredcake {
        # Duration (in seconds) of the potion effect when eating a single slice of cake.
        I:"Cake effect duration"=100

        # List of Long Potions that can be used to make a cake.
        S:"Cake effect potion types" <
            speed
            strength
            jump_boost
            regeneration
            fire_resistance
            water_breathing
            invisibility
            night_vision
         >
    }

}


charmcrafting {
    # A compact storage solution borrowed lovingly from Minecraft 1.14.
    B:Barrel=true

    # A bookshelf with 9 slots that can store books.
    # Provides the same enchanting power as a normal bookshelf as long as there is at least 1 book on the shelf.
    B:BookshelfChest=true

    # Offers a smaller storage solution with the benefit of being transportable.  Name your crate on an anvil to change the displayed label.
    # You can also seal the crate by combining it with an iron ingot - the only way to get things out is to break it.
    B:Crate=true

    # An elegant lighting solution borrowed lovingly from Minecraft 1.14.
    # Now with special Golden edition!
    B:Lantern=true

    # Craft (or find) beetroot soup with a flower to make a suspicious soup.
    # Different flowers provide positive effects that are different for each world.
    # Be warned: these unstable concoctions might occasionally have negative side effects.
    B:SuspiciousSoup=true

    crate {
        # Enables the display of the crate's name when you look at the crate.
        B:"Show crate name"=true

        # Amount of XP (levels) required to use a name tag to seal a crate.
        I:"XP cost"=0
    }

    lantern {
        # Lanterns make a gentle fire crackling sound.
        B:"Ambient sound"=true

        # Lantern will fall when the block under it is broken, or when the block above a hanging lantern is broken.
        B:"Lanterns obey gravity"=true
    }

    suspicioussoup {
        # Add soup to mansions, igloos and village blacksmith loot.
        B:"Add to loot"=true

        # Amount of half-hearts of health restored by consuming any soup.
        I:"Health restored"=10

        # Minimum duration (in seconds) of the effect(s) of the soup when consumed.
        I:"Suspicious Soup duration"=15
    }

}


charmenchanting {
    # Combine the Curse Break enchanted book with a cursed item on an anvil to remove the curse.
    B:CurseBreak=true

    # Additional curses to ruin your day.
    # These curses can be given to player items when touched by a Spectre or being affected by the Corruption potion.
    B:ExtraCurses=true

    # A hoe with the Homing enchantment is attracted to ore of the same ingots that make up the head of the hoe.
    # Right click underground.  If you hear a sound, you can follow it to the ore.
    B:Homing=true

    # An item with the Salvage enchantment does not disappear when its durability is depleted, giving you a chance to get it repaired.
    # If the item runs out of durability the player will drop it and must be picked up again.  Watch out for lava.
    B:Salvage=true

    cursebreak {
        # Amount of XP (levels) to remove a curse from an item
        I:"XP cost"=1
    }

    extracurses {
        # Chance (out of 1.0) that an item affected by Clumsiness fails to do its job.
        D:"Clumsiness chance"=0.12

        # Chance (out of 1.0) that an item affected by Harming hurts the player.
        D:"Harming chance"=0.12

        # Amount of damage (in half-hearts) dealt to the player when using an item affected by Harming.
        I:"Harming damage"=1

        # List of mobs that can spawn when using an item affected by Haunting.
        S:"Haunting mobs" <
            zombie
            skeleton
            witch
            enderman
            charm:spectre
         >

        # Chance (out of 1.0) that an item affected by Haunting causes a mob to spawn near the player.
        D:"Haunting spawn chance"=0.12

        # Distance (in blocks) where a mob can spawn when using an item affected by Haunting.
        I:"Haunting spawn range"=8

        # Maximum amount of durability damage given to an item affected by Rusting when the item is used.
        I:"Rusting damage"=12
    }

}


charmloot {
    # Abandoned Crates may be found underground.  These crates are sealed so must be smashed to obtain contained items.
    B:AbandonedCrates=true

    # Right-click with a Totem of Returning to bind it to a location in the world.
    # The next time you use the totem, you will be returned to that location, destroying the totem in the process.
    B:TotemOfReturning=true

    # With the Totem of Shielding in your offhand (shield) slot, any damage you take is absorbed by the totem instead.
    B:TotemOfShielding=true

    # Use a fortune-enchanted shovel on dirt, sand, clat or gravel for a chance to unearth dungeon treasure items.
    B:UnearthItems=true

    # Wearing a Witch Hat protects your items from being cursed when touched by a Spectre.
    # NOTE: Quark must be installed for this feature to be enabled.
    B:WitchHatProtection=true

    # A witch has a chance to drop a Potion of Corruption when killed by a player.
    B:WitchesDropCorruption=true

    # A witch has a chance to drop a Potion of Luck when killed by a player.
    B:WitchesDropLuck=true

    abandonedcrates {
        # Chance (out of 1.0) of a crate generating in a chunk, if it is possible to do so.
        D:"Generate crate chance"=0.12
    }

    totemofreturning {
        # If Illusioners are enabled, add the totem as a possible drop.
        B:"Add as Illusioner drop"=true

        # Add the totem to mansions, mineshafts and nether fortress loot.
        B:"Add to loot"=true
    }

    totemofshielding {
        # If Illusioners are enabled, add the totem as a possible drop.
        B:"Add as Illusioner drop"=true

        # Add the totem to mansions, pyramids and jungle temple loot.
        B:"Add to loot"=true

        # The incoming player damage is multiplied by this amount before being transferred to the totem.
        D:"Damage multiplier"=0.75

        # Maximum durability of the totem.
        I:"Maximum Health"=100
    }

    unearthitems {
        # Chance (out of 1.0) of unearthing a treasure item when digging with an enchanted shovel/spade.
        D:"Unearthing item chance"=0.001

        # Maximum durability cost to the shovel when a treasure item is unearthed.
        I:"Unearthing item damage"=8

        # Blocks that treasure may be unearthed from when digging with an enchanted shovel/spade.
        S:"Valid blocks" <
            sand
            gravel
            clay
            dirt
         >
    }

    witchesdropcorruption {
        # Chance (out of 1.0) of a witch dropping a Potion of Corruption when killed by the player.
        D:"Drop chance"=0.2
    }

    witchesdropluck {
        # Chance (out of 1.0) of a witch dropping a Potion of Luck when killed by the player.
        D:"Drop chance"=0.1
    }

}


charmmisc {
    # Right click a cactus with an empty glass bottle for a chance to fill the bottle with water.
    B:CactusWater=true

    # Cauldrons can be used as a permanent water source when sneaking.
    B:CauldronWaterSource=true

    # Adds records of all Minecraft background music.
    B:ExtraRecords=true

    # Leather armor is invisible and does not increase mob awareness when drinking Potion of Invisibility.
    B:LeatherArmorInvisibility=true

    # Like Quark's random animal textures, this feature lets wolves and cats spawn with additional skin textures.
    B:RandomAnimalTextures=true

    # Stops the background music when playing a record in a jukebox to avoid a horrible cacophony.
    B:RecordsStopBackgroundMusic=true

    # Using shears to break a flower has a chance of increasing the number of dropped flowers.
    B:ShearedFlowers=true

    # Using shears to break a melon has a chance to drop all 9 melon pieces.
    B:ShearedMelons=true

    # Landing on sponge absorbs some of the player's fall damage.
    B:SpongesReduceFallDamage=true

    # Enchanted Books can stack (up to 16).
    B:StackableEnchantedBooks=true

    # Milk buckets can stack (up to 16).
    B:StackableMilkBuckets=true

    # Potions and water bottles can stack (up to 16).
    B:StackablePotions=true

    # Tamed animals no longer take direct damage from players.
    # They still suffer secondary effects, such as burning from a Fire Aspect sword.
    B:TamedAnimalsNoDamage=true

    # As long as a Totem of Undying is in your inventory, it will be consumed to protect you from death.
    B:UseTotemFromInventory=true

    # Drink a bottle of water in a hot and dry biome to provide a regeneration boost.
    B:WaterInHotBiomes=true

    randomanimaltextures {
        # Textures to use when rendering Black cats (Cat Type 2).
        S:"Black cat textures" <
            minecraft:black
            charm:all_black
         >

        # Textures to use when rendering Ocelots.
        S:"Ocelot textures" <
            minecraft:ocelot
         >

        # Enable random textures depending on the cat type, borrowed lovingly from Minecraft 1.14.
        B:"Random cat textures"=true

        # Enable random wolf textures with brown, grey and black variants.
        B:"Random wolf textures"=true

        # Textures to use when rendering Red cats (Cat Type 1).
        S:"Red cat textures" <
            minecraft:red
            charm:persian
            charm:tabby
         >

        # Textures to use when rendering Siamese and other cats (Cat Type 3).
        S:"Siamese / other cat textures" <
            minecraft:siamese
            charm:calico
            charm:white
            charm:ragdoll
            charm:british_shorthair
            charm:jellie
         >

        # Textures to use when rendering wolves.
        S:"Wolf textures" <
            minecraft:wolf
            charm:brown
            charm:grey
            charm:black
         >
    }

}


charmsmithing {
    # Combine an item with its golden version on an anvil to reduce the original item's repair cost.
    B:DecreaseRepairCost=true

    # Combine a Totem of Returning with a clock on an anvil to increase the number of times it can be used.
    B:ExtendTotemOfReturning=true

    # Combine an Enchanted Book with empty bottles on an anvil to get Bottles o' Enchanting.
    # The more levels and enchantments the book has, the more bottles are returned.
    B:ExtractBookXP=true

    # Extract enchantments from any enchanted item into an empty book.
    # The enchantments are weakened in the process, and the original item is destroyed.
    B:ExtractEnchantments=true

    # Combine a tool, weapon or armour with flint to break the item into its component materials.
    # For a tool or weapon the material will be whatever the head is made from.
    # To get the full amount of material back, the item must be completely repaired and the equivalent number of pieces of flint used.
    B:RecycleWithFlint=true

    # Tallow can be combined on an anvil with a tool or armor to give a small durability boost.
    # Repairing using tallow has a chance to increase future repair costs of the tool or armor.
    # NOTE: Quark must be installed for this feature to be enabled.
    B:TallowIncreasesDurability=true

    decreaserepaircost {
        # Amount that a golden item will decrease another item's repair cost.
        I:"Decrease repair amount"=2

        # Amount of XP (levels) to use a golden item to decrease another item's repair cost.
        I:"XP cost"=0
    }

    extendtotemofreturning {
        # Amount of XP (levels) required to increase the number of times a Totem of Returning can be used.
        I:"XP cost"=5
    }

    extractbookxp {
        # The minimum number of glass bottles needed when converting enchantments.
        I:"Minimum required bottles"=5

        # Amount of XP (levels) to activate the conversion of enchantments into Bottles o' Enchanting.
        I:"XP cost"=0
    }

    extractenchantments {
        # The minimum XP cost before adding XP equivalent to the enchantment level(s) of the item.
        I:"Base XP cost"=1

        # Number of levels that enchantments are weakened when converting.
        I:"Weaken by amount"=1
    }

    recyclewithflint {
        # How many units of material horse armour is worth.  Example: if set to 8, gold horse armor will return 8 gold ingots.
        I:"Horse armor material units"=8

        # Amount of XP (levels) needed to break apart the item.
        I:"XP cost"=0
    }

}


charmworld {
    # Right-click a bat with a bucket to capture it.
    # Right-click your Bat in a Bucket to release the bat and help locate entities around you.
    B:BatBucket=true

    # If you are holding an emerald and are struck by lightning, the emerald will become charged and you will take no damage.
    # Right-click a Charged Emerald to throw it, creating a lightning strike at the point of impact.
    B:ChargedEmeralds=true

    # Illusioners are spell-casting illagers equipped with bows that create fake copies of themselves while fighting.
    # This feature lets illusioners spawn in Roofed Forest biomes.  An illusioner has a chance of dropping a totem.
    B:IllusionersInRoofedForest=true

    # Villages spawn in more biomes.  The type of biome determines what materials the village buildings are constructed from.
    B:MoreVillageBiomes=true

    # Gold deposits spawn in the Nether that can be broken to receive gold nuggets.
    B:NetherGoldDeposits=true

    # Spectres spawn in the darkness at quite a low depth, and are almost invisible to see.
    # When they touch the player they curse a weapon, tool or armor item and disappear.
    # They can be defeated by light - or by the lightest of hits.
    B:Spectre=true

    # Swamp huts may generate with a filled cauldron, a chest of loot and a black cat.
    B:SwampHutDecorations=true

    # Improves village aesthetics with internal and external decoration.
    # Houses and huts are populated with functional and decorative blocks according to a career/profession.
    # Village area can have more trees, flowers, crops, mobs and lights.
    B:VillageDecorations=true

    # Villagers have additional trades.  Librarians can buy back enchanted books, tool smiths repair very damaged anvils for a small iron cost, and zombie flesh is more useful.
    B:VillagerTrades=true

    # Vindicators can be found wandering in Roofed Forest biomes.
    B:VindicatorsInRoofedForest=true

    batbucket {
        # Add the Bat in a Bucket to dungeon loot.
        B:"Add to loot"=true

        # Maximum time (in seconds) that the glowing effect will last.
        I:"Maximum time"=12

        # Range (in blocks) in which entities will glow when the Bat in a Bucket is held.
        I:"Viewing range"=24
    }

    chargedemeralds {
        # Add the charged emerald to dungeon loot.
        B:"Add to loot"=true

        # The maximum number of emeralds that will be converted into Charged Emeralds when a stack of emeralds is held.
        I:"Maximum charged emeralds per strike"=3
    }

    illusionersinroofedforest {
        # Chance (out of 1.0) of an illusioner dropping items when killed.
        D:"Drop chance"=1.0

        # The higher this value, the more illusioners will spawn.
        I:"Spawn weight"=50
    }

    morevillagebiomes {
        # Cold biomes where villages are constructed from Taiga wood.
        S:"Cold biomes" <
            taiga
            mutated_taiga
            mutated_taiga_cold
            ice_flats
            mutated_ice_flats
         >

        # Desert biomes where villages are made from sandstone.
        S:"Desert biomes" <
            desert
            mutated_desert
         >

        # Jungle biomes where villages are constructed from Jungle wood.
        S:"Jungle biomes" <
            jungle
            mutated_jungle
         >

        # Plains biomes where villages are constructed from Oak wood.
        S:"Plains biomes" <
            plains
            mutated_plains
            swampland
            mutated_swampland
         >

        # Savanna biomes where villages are constructed from Acacia wood.
        S:"Savanna biomes" <
            savanna
            mutated_savanna
         >
    }

    spectre {
        # Light level at which a Spectre disappears.
        I:"Despawn light level"=8

        # Maximum depth at which Spectres can spawn.
        I:"Spawn depth"=24

        # The higher this value, the more Spectres will spawn.
        I:"Spawn weight"=100
    }

    villagedecorations {
        # Armor Stands appear in village houses.
        B:"Armor Stands"=true

        # Chance (out of 1.0) of a village having barrels containing farming-related loot scattered within its boundary.
        D:"Barrels outside"=0.6

        # Beds appear in village houses.
        B:Beds=true

        # Coloured rugs appear in village houses and on the top of the village well.
        B:Carpet=true

        # Chance (out of 1.0) of items and blocks considered 'common' to spawn.
        D:"Common chance"=0.8

        # Chance (out of 1.0) of a village having tilled soil, crops and water wells within its boundary.
        D:"Crops outside"=0.8

        # Decorative blocks appear in village houses, such as bookshelves, polished stone and planks.
        B:"Decorative Blocks"=true

        # Chance (out of 1.0) of a chunk within the village boundary spawning a barrel.
        # This is only valid if the 'Barrels outside' config option allows it.
        D:"Extra barrels weight"=0.7

        # Chance (out of 1.0) of a chunk within the village boundary spawning a golem.
        # This is only valid if the 'Mobs outside' config option allows it.
        D:"Extra golem weight"=0.25

        # Chance (out of 1.0) of a chunk allowing any kind of mob generation.
        # The greater the chance, the more likely a mob will be considered to spawn.
        # This is only valid is the 'Mobs outside' config option allows it.
        D:"Extra mobs weight"=0.75

        # Chance (out of 1.0) of a chunk within the village boundary spawning some pumpkins.
        # This is only valid if the 'Pumpkins outside' config option allows it.
        D:"Extra pumpkins weight"=0.7

        # Chance (out of 1.0) of a village having more flowers (up to 3 types chosen based on village seed) within its boundary.
        D:"Flowers outside"=0.9

        # Functional / Interactive blocks appear in village houses, such as anvils, cauldrons and crafting tables.
        B:"Functional Blocks"=true

        # Item frames appear on the walls of village houses, with items specific to the house theme.
        B:"Item Frames"=true

        # Chance (out of 1.0) of a village having torches and lanterns scattered within its boundary.
        D:"Lights outside"=0.8

        # Chance (out of 1.0) of a village having more dogs, cats and golems within its boundary.
        # If the village is in a snowy biome, this option lets snow golems spawn.
        D:"Mobs outside"=0.75

        # Chance (out of 1.0) of a village having mushrooms spawn, including large mushrooms, within its boundary.
        D:"Mushrooms outside"=0.75

        # Chance (out of 1.0) of a village having pumpkins (and rarely melons) scattered within its boundary.
        D:"Pumpkins outside"=0.6

        # Chance (out of 1.0) of items and blocks considered 'rare' to spawn.
        D:"Rare chance"=0.005

        # Chests, crates and barrels (if enabled) appear in village houses, with loot specific to the house theme.
        B:Storage=true

        # Torches appear in village houses and around fields to stop water freezing.
        B:Torches=true

        # Chance (out of 1.0) of a village having different types of trees spawn within its boundary.
        D:"Trees outside"=0.75

        # Chance (out of 1.0) of items and blocks considered 'uncommon' to spawn.
        D:"Uncommon chance"=0.35

        # Chance (out of 1.0) of items and blocks considered 'valuable' to spawn.
        D:"Valuable chance"=0.05
    }

    vindicatorsinroofedforest {
        # Chance (out of 1.0) of a vindicator spawning as Johnny.
        D:"Chance for Johnny"=0.05

        # The higher this value, the more vindicators will spawn.
        I:"Spawn weight"=90
    }

}


